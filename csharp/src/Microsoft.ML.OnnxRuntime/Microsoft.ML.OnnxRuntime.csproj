<Project Sdk="MSBuild.Sdk.Extras/3.0.22">
  <PropertyGroup>
    <!--- packaging properties -->
    <OrtPackageId Condition="'$(OrtPackageId)' == ''">Microsoft.ML.OnnxRuntime</OrtPackageId>
  </PropertyGroup>

  <PropertyGroup>
    <IncludeMobileTargets>true</IncludeMobileTargets>
    <BaseTargets>netstandard2.0;net8.0</BaseTargets>
    <MobileTargets></MobileTargets>
  </PropertyGroup>

  <!-- special case the DesktopOnly solution -->
  <PropertyGroup Condition="'$(SolutionName)' == 'OnnxRuntime.DesktopOnly.CSharp'">
    <IncludeMobileTargets>false</IncludeMobileTargets>
  </PropertyGroup>

  <!-- add MAUI targets if building ORT package -->
  <PropertyGroup Condition="('$(OrtPackageId)' == 'Microsoft.ML.OnnxRuntime' OR
                             '$(OrtPackageId)' == 'Microsoft.ML.OnnxRuntime.Azure') AND
                            '$(IncludeMobileTargets)' == 'true'">
    <MobileTargets>net8.0-android;net8.0-ios;net8.0-maccatalyst</MobileTargets>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OrtPackageId)' == 'Microsoft.ML.OnnxRuntime.Training' AND
                              '$(IncludeMobileTargets)' == 'true'">
    <MobileTargets>net8.0-android</MobileTargets>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>$(BaseTargets);$(MobileTargets)</TargetFrameworks>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Build host  -->
    <IsLinuxBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinuxBuild>
    <IsWindowsBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindowsBuild>
    <IsMacOSBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsMacOSBuild>

    <!-- $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) gives better results for MAUI builds than
         $(TargetPlatformIdentifier). See https://github.com/dotnet/msbuild/issues/7359
         Note there are slight differences in casing (e.g. macos vs macOS), so if we ever
         change to use $(TargetPlatformIdentifier) we need to adjust for that.
    -->
    <IsWindowsTarget Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">true</IsWindowsTarget>
    <IsAndroidTarget Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">true</IsAndroidTarget>
    <IsIOSTarget Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">true</IsIOSTarget>
    <IsMacCatalystTarget Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">true</IsMacCatalystTarget>

    <OnnxRuntimeRoot>$(ProjectDir)..\..\..</OnnxRuntimeRoot>

    <!-- Controls whether C# Bindings for Training are included in the Managed Nuget Package.
    Bindings for training are included by default. If user tries to call training apis when the native package installed
    on their device is not built for training, an exception will be thrown with the following message -
    "Training is disabled in the current build. Please build onnxruntime from source with the build flags
    enable_training_apis. "-->
    <EnableTrainingApis Condition="'$(EnableTrainingApis)' == ''">true</EnableTrainingApis>
  </PropertyGroup>

  <!-- package info -->
  <PropertyGroup>
    <RootNamespace>Microsoft.ML.OnnxRuntime</RootNamespace>
    <AssemblyName>Microsoft.ML.OnnxRuntime</AssemblyName>

    <!-- Ignore any passed in value unless this is a release build. -->
    <PackageVersion Condition="'$(IsReleaseBuild)' != 'true'"></PackageVersion>
    <PackageVersion Condition="'$(PackageVersion)' == '' And '$(Configuration)' == 'Debug'">1.0.0</PackageVersion>
    <PackageVersion Condition="'$(PackageVersion)' == '' ">0.0.0</PackageVersion>

    <!-- Set the attributes for the managed dll -->
    <!-- https://learn.microsoft.com/en-us/dotnet/standard/assembly/set-attributes-project-file -->
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <AssemblyTitle>Microsoft.ML.OnnxRuntime C# Bindings</AssemblyTitle>
    <Company>Microsoft</Company>
    <Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
    <Description>This package contains ONNX Runtime for .Net platforms</Description>

    <!-- NOTE: this is also used as the default for AssemblyVersion and FileVersion -->
    <Version>$(PackageVersion)</Version>

    <!-- Set the attributes for a nuget package -->
    <!--- The package name is always hardcoded as the package created by this project only contains managed assemblies -->
    <!--- The parameter OrtPackageId is only used for some conditional logic below -->
    <Authors>Microsoft</Authors>
    <PackageId>Microsoft.ML.OnnxRuntime.Managed</PackageId>
    <PackageTags>ONNX;ONNX Runtime;Machine Learning</PackageTags>
    <PackageProjectUrl>https://github.com/Microsoft/onnxruntime</PackageProjectUrl>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageIcon>ORT_icon_for_light_bg.png</PackageIcon>
    <PackageReleaseNotes>
      Release Def:
        Branch: $(BUILD_SOURCEBRANCH)
        Commit: $(BUILD_SOURCEVERSION)
        Build: https://aiinfra.visualstudio.com/Lotus/_build/results?buildId=$(BUILD_BUILDID)
    </PackageReleaseNotes>

    <!-- sourcelink flags -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>

    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup>
    <Platforms>AnyCPU;x86</Platforms>
    <LangVersion>default</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

    <TargetArchitecture Condition=" '$(TargetArchitecture)' == '' ">x64</TargetArchitecture>

    <EnableDefaultItems>false</EnableDefaultItems>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <DebugType>portable</DebugType>

    <Configurations>Debug;Release;RelWithDebInfo</Configurations>
  </PropertyGroup>

  <!-- Enable training APIs for the build. The native package must be
       a training build with build flag 'enable_training_apis'.
  -->
  <PropertyGroup Condition="'$(EnableTrainingApis)'=='true'">
    <OrtConstants>$(OrtConstants);__ENABLE_TRAINING_APIS__</OrtConstants>
  </PropertyGroup>

  <!--
    Properties that depend on the target framework.
  -->
  <PropertyGroup Condition="'$(IsIOSTarget)'=='true' OR '$(IsMacCatalystTarget)'=='true' OR '$(IsAndroidTarget)'=='true'">
    <OrtConstants>$(OrtConstants);__MOBILE__</OrtConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsAndroidTarget)'=='true'">
    <OrtConstants>$(OrtConstants);__ANDROID__</OrtConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsIOSTarget)'=='true' OR '$(IsMacCatalystTarget)'=='true'">
    <OrtConstants>$(OrtConstants);__IOS__</OrtConstants>
  </PropertyGroup>

  <!-- CoreML is valid on iOS, Mac Catalyst and macOS -->
  <PropertyGroup Condition="'$(IsIOSTarget)'=='true' OR '$(IsMacCatalystTarget)'=='true' OR '$(IsMacOSBuild)'=='true'">
    <OrtConstants>$(OrtConstants);__ENABLE_COREML__</OrtConstants>
  </PropertyGroup>

  <!-- CoreML is valid for a macOS .net app. Enable in case GetTargetPlatformIdentifier was not set.
       TargetFrameworkIdentifier of .netX is '.NETCoreApp'
       We do a runtime check that the OS is macOS before attempting to enable CoreML.
       NOTE: $(TargetFrameworkIdentitier) may not be set yet, so we need to call GetTargetFrameworkIdentifier
  -->
  <PropertyGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)'))=='.NETCoreApp' AND
                            $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))==''">
    <OrtConstants>$(OrtConstants);__ENABLE_COREML__</OrtConstants>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants>$(DefineConstants);$(OrtConstants)</DefineConstants>
  </PropertyGroup>

  <!-- debug output - makes finding/fixing any issues with the the conditions easy.  -->
  <Target Name="DumpValues" BeforeTargets="PreBuildEvent">
    <Message Text="SolutionName='$(SolutionName)'" />
    <Message Text="TargetPlatform='$(TargetPlatform)' TargetPlatformIdentifier='$(TargetPlatformIdentifier)' " />
    <Message Text="TargetFramework='$(TargetFramework)' TargetFrameworkIdentifier='$(TargetFrameworkIdentifier)' " />
    <Message Text="[MSBuild]::GetTargetPlatformIdentifier(TargetFramework)='$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))' " />
    <Message Text="[MSBuild]::GetTargetFrameworkIdentifier(TargetFramework)='$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)'))' " />
    <Message Text="IsWindowsBuild='$(IsWindowsBuild)' IsLinuxBuild='$(IsLinuxBuild)' IsMacOSBuild='$(IsMacOSBuild)'" />
    <Message Text="IsWindowsTarget='$(IsWindowsTarget)' IsAndroidTarget='$(IsAndroidTarget)' IsIOSTarget='$(IsIOSTarget)' IsMacCatalystTarget='$(IsMacCatalystTarget)'" />
    <Message Text="OrtConstants='$(OrtConstants)' " />
    <Message Text="TargetFrameworks='$(TargetFrameworks)' " />
  </Target>

  <ItemGroup>
    <None Include="$(OnnxRuntimeRoot)\LICENSE.txt;$(OnnxRuntimeRoot)\ThirdPartyNotices.txt;$(OnnxRuntimeRoot)\ORT_icon_for_light_bg.png;$(OnnxRuntimeRoot)\docs\Privacy.md"
          PackagePath="\"
          Pack="true"
          Visible="false"
    />
    <None Include="targets\netstandard\$(PackageId).targets"
          PackagePath="build\netstandard2.0\$(PackageId).targets"
          Pack="true"
          Visible="false"
    />
  </ItemGroup>

  <!--
    We used to have platform specific files named *.<platform>.cs (e.g. 1.11 release) but don't anymore,
    so the 'shared' is now meaningless.
  -->
  <ItemGroup>
    <Compile Include="**\*.shared.cs" Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Memory" Version="4.5.5" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <LicenseFile Include="$(OnnxRuntimeRoot)\LICENSE" Visible="false" />
    <TargetsFile Include="$(OnnxRuntimeRoot)\csharp\src\Microsoft.ML.OnnxRuntime\targets\netstandard\targets.xml" Visible="false" />
  </ItemGroup>

  <Target Name="CopyMiscFiles" BeforeTargets="PreBuildEvent">
    <Copy SourceFiles="@(LicenseFile)" DestinationFiles="@(LicenseFile->'$(OnnxRuntimeRoot)\%(Filename).txt')" />
    <Copy SourceFiles="@(TargetsFile)" DestinationFiles="@(TargetsFile->'$(OnnxRuntimeRoot)\csharp\src\Microsoft.ML.OnnxRuntime\targets\netstandard\$(PackageId).targets')" />
  </Target>

  <Target Name="CopyPackage" AfterTargets="Pack">
    <Copy
      SourceFiles="$(OutputPath)\$(PackageId).$(PackageVersion).nupkg"
      DestinationFolder="$(NativeBuildOutputDir)"
    />
  </Target>

</Project>
