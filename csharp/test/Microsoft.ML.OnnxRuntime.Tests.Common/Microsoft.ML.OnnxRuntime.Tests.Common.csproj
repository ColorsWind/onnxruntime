<Project Sdk="Microsoft.NET.Sdk">
	<!-- ORT specific high level properties -->
	<PropertyGroup>
    <!-- potential alternatives
      <IsLinuxBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinuxBuild>
      <IsWindowsBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindowsBuild>
      <IsMacOSBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsMacOSBuild>
    -->
		<IsWindowsBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">true</IsWindowsBuild>
		<IsLinuxBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'linux'">true</IsLinuxBuild>
		<IsAndroidBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">true</IsAndroidBuild>
		<IsIOSBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">true</IsIOSBuild>
		<IsMacOSBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'macos'">true</IsMacOSBuild>
		<IsMacCatalystBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">true</IsMacCatalystBuild>

		<OnnxRuntimeRoot>$(ProjectDir)..\..\..</OnnxRuntimeRoot>
	</PropertyGroup>

  <!-- debug output - makes finding/fixing any issues with the the conditions easy.  -->
  <Target Name="DumpValues" BeforeTargets="PreBuildEvent">
    <Message Text="TargetPlatform='$(TargetPlatform)' TargetPlatformIdentifier='$(TargetPlatformIdentifier)' " />
    <Message Text="TargetFramework='$(TargetFramework)' TargetFrameworkIdentifier='$(TargetFrameworkIdentifier)' " />
    <Message Text="[MSBuild]::GetTargetPlatformIdentifier(TargetFramework)='$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))' " />
    <Message Text="[MSBuild]::GetTargetFrameworkIdentifier(TargetFramework)='$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)'))' " />
    <Message Text="IsWindowsBuild='$(IsWindowsBuild)' IsLinuxBuild='$(IsLinuxBuild)' IsMacOSBuild='$(IsMacOSBuild)'" />
    <Message Text="IsAndroidBuild='$(IsAndroidBuild)' IsIOSBuild='$(IsIOSBuild)' IsMacCatalystBuild='$(IsMacCatalystBuild)'" />
  </Target>

  <PropertyGroup>
    <!-- netstandard2.0 is used by most platforms. net8.0 is required for linux. -->
    <TargetFrameworks>netstandard2.0;net8.0</TargetFrameworks>
    <IsPackable>false</IsPackable>
    <Platforms>AnyCPU</Platforms>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <ProtoSrc>$(OnnxRuntimeRoot)\cmake\external\onnx</ProtoSrc>

    <!-- Generated OnnxML.cs triggers this warning. -->
    <NoWarn>8981</NoWarn>

    <!-- following attributes were necessary for the migrated Tensor tests -->
    <LangVersion>default</LangVersion>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <SignAssembly>true</SignAssembly> <!-- need signing for friend access to the internals of the Tensors assembly -->
    <AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>
    <Configurations>Debug;Release;RelWithDebInfo</Configurations>
    <!-- end -->

    <RootNamespace>Microsoft.ML.OnnxRuntime.Tests</RootNamespace>
    <AssemblyName>Microsoft.ML.OnnxRuntime.Tests.Common</AssemblyName>

		<!--
		Allow a pre-built ORT native nuget package (Microsoft.ML.OnnxRuntime.<version>.nupkg) to be used.

		The test project that includes this csproj must be built from the command-line with dotnet. Options:
      - Microsoft.ML.OnnxRuntime.Tests.NetCoreApp
      - Microsoft.ML.OnnxRuntime.Tests.MAUI

		If running from the repo root the below is an example command.
			Note that '==' represents a double '-' which isn't allowed in an XML comment
			Properties can also be set via environment variables.

		dotnet build csharp\test\Microsoft.ML.OnnxRuntime.Tests.MAUI\Microsoft.ML.OnnxRuntime.Tests.MAUI.csproj
			==property:UsePrebuiltNativePackage=true
			==property:CurrentOnnxRuntimeVersion=1.19.2
			==source <path containing the Microsoft.ML.OnnxRuntime.<version>.nupkg>
			==source https://api.nuget.org/v3/index.json

		The <version> of the nupkg must match the value provided in CurrentOnnxRuntimeVersion
		-->
		<UsePrebuiltNativePackage Condition="'$(UsePrebuiltNativePackage)' == ''">true</UsePrebuiltNativePackage>
		<CurrentOnnxRuntimeVersion Condition="'$(CurrentOnnxRuntimeVersion)' == ''">1.19.2</CurrentOnnxRuntimeVersion>

  </PropertyGroup>

  <ItemGroup Condition="'$(UsePrebuiltNativePackage)' == 'true'">
    <!-- Use the prebuilt package -->
    <PackageReference Include="Microsoft.ML.OnnxRuntime" Version="$(CurrentOnnxRuntimeVersion)" />
  </ItemGroup>

  <!-- 'Choose' so we don't need a condition on all the PropertyGroup/ItemGroup elements -->
  <Choose>
    <When Condition="'$(UsePrebuiltNativePackage)' != 'true'">
      <PropertyGroup Condition="'$(IsWindowsBuild)'=='true'">
        <!--internal build related properties for Windows -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\Windows</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)\$(Configuration)</NativeBuildOutputDir>
        <ProtocDirectory Condition="'$(ProtocDirectory)'==''">$(OnnxRuntimeBuildDirectory)\$(Configuration)\external\protobuf\cmake\$(Configuration)</ProtocDirectory>
        <ProtocExe>$(ProtocDirectory)\protoc.exe</ProtocExe>
      </PropertyGroup>

      <PropertyGroup Condition="'$(IsLinuxBuild)'=='true'">
        <!--internal build related properties for Linux -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\Linux</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
        <ProtocDirectory Condition="'$(ProtocDirectory)'==''">$(OnnxRuntimeBuildDirectory)\$(Configuration)\external\protobuf\cmake</ProtocDirectory>
        <ProtocExe>$(ProtocDirectory)\protoc</ProtocExe>
      </PropertyGroup>

      <PropertyGroup Condition="'$(IsMacOSBuild)'=='true'">
        <!--internal build related properties for OSX -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\MacOS</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
        <ProtocDirectory Condition="'$(ProtocDirectory)'==''">$(OnnxRuntimeBuildDirectory)\$(Configuration)\external\protobuf\cmake</ProtocDirectory>
        <ProtocExe>$(ProtocDirectory)\protoc</ProtocExe>
      </PropertyGroup>

      <PropertyGroup Condition="'$(IsAndroidBuild)' == 'true'">
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\Android</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
      </PropertyGroup>

      <PropertyGroup Condition="'$(IsIOSBuild)' == 'true'">
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\iOS</OnnxRuntimeBuildDirectory>
        <Platform Condition=" '$(Platform)' == '' ">iPhoneSimulator</Platform>
        <PlatformLower>$(Platform.ToLower())</PlatformLower>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)\$(Configuration)-$(PlatformLower)</NativeBuildOutputDir>
      </PropertyGroup>

      <PropertyGroup Condition="'$(IsMacCatalystBuild)' == 'true'">
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeRoot)\build\macOS</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
      </PropertyGroup>

      <ItemGroup Condition="'$(IsWindowsBuild)' == 'true'">
        <None Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.dll')"
              Include="$(NativeBuildOutputDir)\*.dll;$(NativeBuildOutputDir)\*.pdb">
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
          <Visible>true</Visible>
        </None>
      </ItemGroup>

      <ItemGroup Condition="'$(IsLinuxBuild)' == 'true'">
        <None Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
              Include="$(NativeBuildOutputDir)\libonnxruntime.so">
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
          <Visible>false</Visible>
        </None>
      </ItemGroup>

      <ItemGroup Condition="'$(IsMacOSBuild)' == 'true'">
        <None Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
              Include="$(NativeBuildOutputDir)\libonnxruntime.dylib">
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
          <Visible>false</Visible>
        </None>
      </ItemGroup>

      <ItemGroup Condition="'$(IsAndroidBuild)' == 'true'">
        <AndroidNativeLibrary Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
                              Include="$(NativeBuildOutputDir)\libonnxruntime.so">
          <Link>libs\libonnxruntime.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>

      <ItemGroup Condition="'$(IsIOSBuild)' == 'true'">
        <NativeReference Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
                         Include="$(NativeBuildOutputDir)\libonnxruntime.dylib">
          <Link>libs\libonnxruntime.dylib</Link>
          <Kind>Dynamic</Kind>
          <ForceLoad>True</ForceLoad>
          <IsCxx>True</IsCxx>
        </NativeReference>
      </ItemGroup>

      <ItemGroup Condition="'$(IsMacCatalystBuild)' == 'true'">
        <NativeReference Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
            Include="$(NativeBuildOutputDir)\libonnxruntime.dylib">
          <Link>libs\libonnxruntime.dylib</Link>
          <Kind>Dynamic</Kind>
          <ForceLoad>True</ForceLoad>
          <IsCxx>True</IsCxx>
        </NativeReference>
      </ItemGroup>
    </When>
  </Choose>

	<!-- Property debug output - makes finding/fixing any issues with the conditions easy. -->
	<PropertyGroup>
		<!-- local builds-->
		<HaveOrtDll>false</HaveOrtDll>
		<HaveOrtDll Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.dll')">true</HaveOrtDll>
		<HaveOrtSo>false</HaveOrtSo>
		<HaveOrtSo Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')">true</HaveOrtSo>
		<HaveOrtDylib>false</HaveOrtDylib>
		<HaveOrtDylib Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')">true</HaveOrtDylib>
	</PropertyGroup>

	<Target Name="DumpLocalBuild" BeforeTargets="PreBuildEvent">
		<Message Text="Prebuilt runtime=$(UsePrebuiltNativePackage)" />
		<Message Text="onnxruntime.dll from local build=$(HaveOrtDll)" />
		<Message Text="libonnxruntime.so from local build=$(HaveOrtSo)" />
		<Message Text="libonnxruntime.dylib from local build=$(HaveOrtDylib)" />
	</Target>

  <ItemGroup>
    <Compile Update="Tensors\TensorArithmetic.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Tensors\TensorArithmetic.tt</DependentUpon>
    </Compile>
    <Compile Update="Tensors\TensorOperations.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Tensors\TensorOperations.tt</DependentUpon>
    </Compile>
    <Compile Update="Tensors\TensorArithmetic.cs">
      <DependentUpon>TensorArithmetic.tt</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Update="Tensors\TensorOperations.cs">
      <DependentUpon>TensorOperations.tt</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <!-- include common files for visibility, however they're compiled directly by the target specific test projects -->
    <None Include="InferenceTest.cs" />
    <None Include="OnnxData.cs" />
    <None Include="OrtIoBindingAllocationTest.cs" Condition=" '$(EnableDefaultCompileItems)' == 'true' " />
    <None Include="OrtValueTests.cs" />
    <None Include="OrtFloat16Tests.cs" />
    <None Include="Tensors\TensorTests.cs" Condition=" '$(EnableDefaultCompileItems)' == 'true' " />
    <None Include="Tensors\ArrayTensorExtensionTests.cs" Condition=" '$(EnableDefaultCompileItems)' == 'true' " />
    <None Include="TrainingTest.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Update="Tensors\TensorArithmetic.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>TensorArithmetic.cs</LastGenOutput>
    </None>
    <None Update="Tensors\TensorOperations.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>TensorOperations.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.11.0" />
    <PackageReference Include="Google.Protobuf" Version="3.21.12" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="xunit" Version="2.9.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="$(OnnxRuntimeRoot)\csharp\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj" />
  </ItemGroup>

  <!-- generate OnnxMl.cs from ONNX protobuf definition -->
  <Target Name="ProtoGen" BeforeTargets="BeforeBuild" Condition="Exists('$(ProtocExe)')">
    <Exec Command="$(ProtocExe) -I=$(ProtoSrc) --csharp_out=. $(ProtoSrc)\onnx\onnx-ml.proto3"
          ContinueOnError="false">
    </Exec>
  </Target>

  <Target Name="ProtoDataGen" BeforeTargets="BeforeBuild" Condition="Exists('$(ProtocExe)')">
    <Exec Command="$(ProtocExe) -I=$(ProtoSrc) --csharp_out=. $(ProtoSrc)\onnx\onnx-data.proto3"
          ContinueOnError="false">
    </Exec>
  </Target>

  <ItemGroup>
    <BuildEnvVars Include="OnnxRuntimeBuildDirectory=$(OnnxRuntimeBuildDirectory)" />
  </ItemGroup>

  <Target Name="DefineBuildEnvironmentVariables" BeforeTargets="Build">
    <WriteLinesToFile File="$(OutputPath)\Properties.txt" Lines="@(BuildEnvVars)" Overwrite="true" />
  </Target>

  <!-- Test Data that is used in MAUI and NetCore test app. Loaded via embedded resource for that to be possible -->
  <ItemGroup>
    <EmbeddedResource Include="..\..\testdata\*">
        <Link>TestData\%(Filename)%(Extension)</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\overridable_initializer.onnx">
        <Link>TestData\overridable_initializer.onnx</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\capi_symbolic_dims.onnx">
        <Link>TestData\capi_symbolic_dims.onnx</Link>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>
</Project>
